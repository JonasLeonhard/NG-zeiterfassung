import { Component, OnInit, Output, EventEmitter } from '@angular/core';
import { ListElement } from '../../../models/list-element';
import { Eventping } from '../../../models/eventping';
import { MatDialog, MatDialogConfig } from '@angular/material';
import { FormDialogComponent } from './form-dialog/form-dialog.component';
import { ListElementService } from 'src/app/services/list-element.service';
import { TranslateService } from '@ngx-translate/core';

@Component({
  selector: 'app-schedule-list-form',
  templateUrl: './schedule-list-form.component.html',
  styleUrls: ['./schedule-list-form.component.css']
})
export class ScheduleListFormComponent implements OnInit {
  /**
   * This component handles the Input to create a new ListElement
   *
   * When entering a ListElement Name in Input -> openDialog()
   * (1) it opens a form-dialog in a new MatDialog Service 'DialogWindow'
   *
   * (2) It Passes the input to listElementService wich handles
   * the FormInput of the DialogWindow.
   */
  public ListElement$: ListElement;
  @Output() emitter: EventEmitter<any> = new EventEmitter<any>();

  constructor(
    public dialog: MatDialog,
    public listElementService: ListElementService,
    private translate: TranslateService
  ) {
    this.reset_ListElement();
  }

  ngOnInit() {
  }

  public createElement($event: any, $input: string): void {
    console.log('passing input to list-element service dialog' + $input);
    this.listElementService.passedDialogInput($input);
  }

  public reset_ListElement() {
    // @DEPRECATED
    this.ListElement$ = new ListElement(
      undefined,                    // id generated by server
      undefined,                    // label generated by user
      false,                        // false -> by default in shown list
      undefined,                    // position generated by server
      undefined,                    // <Date + Time :
      undefined,
      undefined,
      undefined,
      false,
    );
    console.log('Reset ListElement');
  }

  public send_EventObj($label: string): void {
    // @DEPRECATED
    const eventObj: Eventping = {
      label : $label,
      object : this.ListElement$
  };
    this.emitter.emit(eventObj);
  }


  public openDialog($event: any, $input: string): void {
    /**
     * This Function opens the Dialog Form Box upon entering a
     * Schedule Point name into the Input box.
     *
     * After submitting the form, the new schedule-list-element
     * gets send with the emitter to  schedule-list.ts createElement
     * Function.
     */
    console.log('Dialog!');
    const dialogConfig = new MatDialogConfig();
    dialogConfig.disableClose = false;
    dialogConfig.autoFocus = true;
    dialogConfig.width = '60%';
    dialogConfig.height = '80%';



    const dialogRef = this.dialog.open(FormDialogComponent, dialogConfig);

    // set default values in form:
    this.listElementService.passedDialogInput($input);


    // Create the new Element
    // this.createElement($event, $input); //!! delete this function
    this.ListElement$.label = $input;
    console.log('createListElement - ListElement: ' + this.ListElement$ + ' | Event: ' + $event + ' |Input to Label: ' + $input);

    this.send_EventObj('ScheduleListForm-createElement');
    this.reset_ListElement();
  }


}
